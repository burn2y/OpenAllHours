package chrissoftwareengineeringwork;

import java.awt.event.ActionEvent;

/**
 *
 * @author Chris
 */
public class AllocateTasksStp1 extends javax.swing.JFrame {

    private AllocateTasksStp2 allocateTasksStp2;
    private ManagerMainMenuUI parent;
            
    
    public AllocateTasksStp1(ManagerMainMenuUI p) {
        parent = p;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTasks = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        next = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblTasks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task ID", "Description", "Pysical Demands", "Expected Duration"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTasks);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Unallocated Tasks");

        jLabel2.setText("Select a task to allocate and select next");

        next.setText("Next"); 
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                            .addComponent(next, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(jLabel1)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(next)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        pack();
        /*
        try
        {
            for(Task tsk : parent.getTskList())
            {
                if(tsk.getAllocatedTo() == null)
                {
                    tblTasks.setValueAt(tsk.getTskID(), i, 0);
                    tblTasks.setValueAt(tsk.getTskDescription(), i, 1);
                    tblTasks.setValueAt(Integer.toString(tsk.getPriority()), i, 2);
                    tblTasks.setValueAt(Float.toString(tsk.getExpectedDuration()), i, 3);
                    tblTasks.setValueAt(tsk.getRequiredSignOffLvl(), i, 4);
                    tblTasks.setValueAt(tsk.getDateCreated(), i, 5); 
                }
            }
        }
        catch(NullPointerException e)
        {
            System.out.println("Error");
        }
*/
    }// </editor-fold>                        


    private void nextActionPerformed(ActionEvent evt)
    {
        Integer selectedRow = tblTasks.getSelectedRow();
        Integer tskID = Integer.parseInt(tblTasks.getValueAt(selectedRow, 0).toString());
        Task tsk = null;
        for(Task task : parent.getTskList())
        {
            if(task.getTskID() == tskID)
            {
                tsk = task;
            }
        }
        
        
        allocateTasksStp2 = new AllocateTasksStp2(this, tsk);
        
    }
    
    
    
    
    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton next;
    private javax.swing.JTable tblTasks;
    // End of variables declaration                   
}

