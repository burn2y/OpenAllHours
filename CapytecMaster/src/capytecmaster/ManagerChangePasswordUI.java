package capytecmaster;

// classes imported
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 * GUI class changes password of the user by updating the database
 * @author Chris Burn (w16012643)
 */
public class ManagerChangePasswordUI extends javax.swing.JFrame {

    // variables declared
    private Integer empID;
    private ManagerMainMenuUI parent;
    Connection dbConn = connection.connect();
    Statement stmt = null;
    
    // constructor
    public ManagerChangePasswordUI(Integer empID, ManagerMainMenuUI p) 
    {
        // variables set
        parent = p;
        this.empID = empID;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        changePasswordLbl = new javax.swing.JLabel();
        currentPasswordLbl = new javax.swing.JLabel();
        newPasswordLbl = new javax.swing.JLabel();
        newPasswordConfirm = new javax.swing.JLabel();
        confirmBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        currentPassword = new javax.swing.JPasswordField();
        newPassword = new javax.swing.JPasswordField();
        newPassword1 = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        changePasswordLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        changePasswordLbl.setText("Reset Password");

        currentPasswordLbl.setText("Password:");

        newPasswordLbl.setText("New Password:");
        newPasswordLbl.setToolTipText("");

        newPasswordConfirm.setText("New Password:");

        confirmBtn.setText("Confirm");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(91, Short.MAX_VALUE)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(118, 118, 118)
                            .addComponent(changePasswordLbl))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(31, 31, 31)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(newPasswordLbl)
                                        .addComponent(newPasswordConfirm)
                                        .addComponent(currentPasswordLbl))
                                    .addGap(254, 254, 254))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(108, 108, 108)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(currentPassword)
                                        .addComponent(newPassword)
                                        .addComponent(newPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(changePasswordLbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentPasswordLbl)
                    .addComponent(currentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPasswordLbl)
                    .addComponent(newPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPasswordConfirm)
                    .addComponent(newPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(confirmBtn))
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>                        

    
    // action listener for back button
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        this.setVisible(false);
        parent.setVisible(true);
    }                                       

    // action listener for confirm button
    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) 
    {                                           
        // current password string declared and set to null
        String strCurrentPassword = null;
        
        // SQL string declared
        String getAllEmpsSql = "SELECT * FROM EMPLOYEE WHERE ID = " + empID;
        try
        {
            // database query executed
            stmt = dbConn.createStatement();   
            ResultSet rs = stmt.executeQuery(getAllEmpsSql);
            while(rs.next())
            {
                // password retrived from result set
                strCurrentPassword = rs.getString("Password");
            }
        }
        catch(SQLException sqlex) 
        {
            // error catching
            System.out.println(sqlex.getMessage());
            System.out.println("Duration update error\n");
        }
        
        if(currentPassword.getText().equals(strCurrentPassword) && 
                newPassword.getText().equals(newPassword1.getText()) &&
                newPassword.getText().length() > 3)
        {
            //.code runs if current password is equal to password retrieved from 
            // the database AND if both new passwords provided match AND if 
            // the new password is longer than 3 characters
            
            // SQL string to update users password created
            String sqlUpdatePassword = "UPDATE EMPLOYEE SET Password = '" + 
                    newPassword.getText() + "' WHERE ID = "  + empID;
            try
            {
                // create and execute statement
                stmt = dbConn.createStatement(); 
                stmt.executeUpdate(sqlUpdatePassword); 
            }
            catch(SQLException sqlex) 
            {
                System.out.println(sqlex.getMessage());
                System.out.println("Duration update error\n");
            }
            
            // message to user. Password changed
            JOptionPane.showMessageDialog(this, "Your password has been changed", 
                    "Done", JOptionPane.INFORMATION_MESSAGE);
                
        }
        else
        {
            // else show error message
            JOptionPane.showMessageDialog(this, 
                    "The password you entered is incorrect", "Error", 
                    JOptionPane.ERROR_MESSAGE);
        }
    }                                          


    // Variables declaration - do not modify                     
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel changePasswordLbl;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JPasswordField currentPassword;
    private javax.swing.JLabel currentPasswordLbl;
    private javax.swing.JPasswordField newPassword;
    private javax.swing.JPasswordField newPassword1;
    private javax.swing.JLabel newPasswordConfirm;
    private javax.swing.JLabel newPasswordLbl;
    // End of variables declaration                   
}

