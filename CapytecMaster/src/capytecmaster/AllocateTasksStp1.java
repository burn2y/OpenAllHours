package capytecmaster;

import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 * GUI class for the first step of allocating a task
 * 
 * @author Chris
 */
public class AllocateTasksStp1 extends javax.swing.JFrame {

    // parent GUI declared
    private ManagerMainMenuUI parent;
    
    // connection retreived from database class
    Connection dbConn = connection.connect();
    // Statement declared and set to null
    Statement stmt = null;
            
    // constructor
    public AllocateTasksStp1(ManagerMainMenuUI p) {
        parent = p;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTasks = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        next = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task ID", "Description", "Pysical Demands", "Expected Duration"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        
        // connect to DB. get all records into arrayList. substitute arrayList of tasks into for loop below
        
        ArrayList<Task> tskList = new ArrayList<>();
        
        String getAllTsksSql = "SELECT * FROM TASKS";
             try
            {
                stmt = dbConn.createStatement();   
                ResultSet rs = stmt.executeQuery(getAllTsksSql);
                while(rs.next())
                {
                    float demand = Float.valueOf(rs.getString("Demand").toString());
                    float duration = Float.valueOf(rs.getString("Duration").toString());
                    
                    Task tsk = new Task(rs.getInt("ID"), rs.getInt("Allocated"), rs.getInt("Priority"), 
                    rs.getInt("SignOff"), rs.getString("Description"), rs.getString("DateCreated"),rs.getString("DueDate"), 
                    rs.getString("SignOffLevel"), demand, duration, rs.getInt("isNormal"), 
                    rs.getString("Completed"));
                    
                    tskList.add(tsk);
                }
            }
            catch(SQLException sqlex) {
              System.out.println(sqlex.getMessage());
              System.out.println("Duration update error\n");
        }
        
        for(Task tsk : tskList)
        {
            if(tsk.getAllocatedTo() == 0)
            {
                Integer tskID = tsk.getTskID();
                Object[] row = new Object[]
                {
                    tskID, tsk.getTskDescription(), tsk.getPhysicalDemandsRating(), tsk.getExpectedDuration()
                };
                model.addRow(row);
            }
        }
        
        tblTasks.setModel(model);
        
        jScrollPane1.setViewportView(tblTasks);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Unallocated Tasks");

        jLabel2.setText("Select a task to allocate and select next");

        next.setText("Next"); 
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                            .addComponent(next, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(jLabel1)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(next)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        

        pack();
        
        
    }// </editor-fold>                        


    private void nextActionPerformed(ActionEvent evt)
    {
        if(tblTasks.getSelectedRow() == -1)
        {
            // error message displayed if no task is selected
            JOptionPane.showMessageDialog(null, "You have not selected a task!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            // selected row retreived and stored in variable
            Integer selectedRow = tblTasks.getSelectedRow();
            
            // task ID retreived from table using getValueAt method. Result converted to string and stored in variable
            Integer tskID = Integer.parseInt(tblTasks.getValueAt(selectedRow, 0).toString());
            
            // step2 GUI created and visibility set to true
            AllocateTasksStp2 allocateTasksStp2 = new AllocateTasksStp2(this, tskID);
            allocateTasksStp2.setVisible(true);
            this.setVisible(false);
        }
        
    }
    
    // method that returns the parent of the class
    public ManagerMainMenuUI getParent()
    {
        return parent;
    }
  
    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton next;
    private javax.swing.JTable tblTasks;                  
}

